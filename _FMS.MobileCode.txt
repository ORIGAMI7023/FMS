### 文件索引
App.xaml
App.xaml.cs
AppShell.xaml
AppShell.xaml.cs
AppState.cs
FMS.Mobile.csproj
MauiProgram.cs
Controls\CustomCalendarView.xaml
Controls\CustomCalendarView.xaml.cs
Converters\ZeroToVisibleConverter.cs
Models\DoctorMonthlySummary.cs
Models\MonthlySummary.cs
Platforms\Android\AndroidManifest.xml
Platforms\Android\MainActivity.cs
Platforms\Android\MainApplication.cs
Platforms\Android\Resources\values\colors.xml
Platforms\Android\Resources\xml\network_security_config.xml
Platforms\Windows\App.xaml
Platforms\Windows\App.xaml.cs
Properties\launchSettings.json
Resources\AppIcon\appicon.svg
Resources\AppIcon\appiconfg.svg
Resources\Splash\splash.svg
Resources\Styles\Colors.xaml
Resources\Styles\Styles.xaml
Services\ApiService.cs
ViewModels\DashboardViewModel.cs
ViewModels\DoctorViewModel.cs
Views\DashboardPage.xaml
Views\DashboardPage.xaml.cs
Views\DoctorPage.xaml
Views\DoctorPage.xaml.cs
Views\TrendPage.xaml
Views\TrendPage.xaml.cs

### 文件内容
      var ex = e.ExceptionObject as Exception;
                Debug.WriteLine($"[全局异常]：{ex?.Message}");
            };


            MainPage = new AppShell();
        }
    }
}


# --- AppShell.xaml ---
<?xml version="1.0" encoding="UTF-8" ?>
<Shell xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:views="clr-namespace:FMS.Mobile.Views"
       x:Class="FMS.Mobile.AppShell">

    <TabBar>
        <ShellContent Title="总览" Icon="home.png" ContentTemplate="{DataTemplate views:DashboardPage}" Route="home" />
        <ShellContent Title="趋势" Icon="trend.png" ContentTemplate="{DataTemplate views:TrendPage}" Route="trend" />
        <ShellContent Title="医生" Icon="doctor.png" ContentTemplate="{DataTemplate views:DoctorPage}" Route="doctor" />
    </TabBar>
</Shell>

# --- AppShell.xaml.cs ---
namespace FMS.Mobile;

public partial class AppShell : Shell
{
    public AppShell()
    {
        InitializeComponent();
    }
}

# --- AppState.cs ---
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace FMS.Mobile
{
    public static class AppState
    {
        /// <summary>
        /// 医生页最后一次选中的月份（1 号日期）；null 表示未设置
        /// </summary>
        public static DateTime? LastDoctorMonth { get; set; }
    }
}


# --- FMS.Mobile.csproj ---
﻿<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net9.0-android35.0;net9.0-windows10.0.19041.0</TargetFrameworks>
		<!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
		<!-- <TargetFrameworks>$(TargetFrameworks);net8.0-tizen</TargetFrameworks> -->

		<!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
		<!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

		<OutputType>Exe</OutputType>
		<RootNamespace>FMS.Mobile</RootNamespace>
		<UseMaui>true</UseMaui>
		<SingleProject>true</SingleProject>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>

		<!-- Display name -->
		<ApplicationTitle>FMS.Mobile</ApplicationTitle>

		<!-- App Identifier -->
		<ApplicationId>com.companyname.fms.mobile</ApplicationId>

		<!-- Versions -->
		<ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
		<ApplicationVersion>1</ApplicationVersion>

		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
		<SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
		<TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
	</PropertyGroup>

	<ItemGroup>
		<!-- App Icon -->
		<MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

		<!-- Splash Screen -->
		<MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

		<!-- Images -->
		<MauiImage Include="Resources\Images\*" />
		<MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

		<!-- Custom Fonts -->
		<MauiFont Include="Resources\Fonts\*" />

		<!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
		<MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
		<PackageReference Include="Microcharts.Maui" Version="0.9.6" />
		<PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" />
		<PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.1" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
		<PackageReference Include="SkiaSharp" Version="2.88.6" />
		<PackageReference Include="SkiaSharp.Views.Maui.Controls" Version="2.88.6" />
		<PackageReference Include="CommunityToolkit.Maui" Version="5.2.0" />

	</ItemGroup>

</Project>
	

# --- MauiProgram.cs ---
﻿using CommunityToolkit.Maui;
using Microcharts.Maui;
using Microsoft.Extensions.Logging;

namespace FMS.Mobile
{
    public static class MauiProgram
    {
        public static MauiApp CreateMauiApp()
        {
            var builder = MauiApp.CreateBuilder();

            builder
                .UseMauiApp<App>()
                .UseMicrocharts()
                .UseMauiCommunityToolkit()
                .ConfigureFonts(fonts =>
                {
                    fonts.AddFont("OpenSans-Regular.ttf", "OpenSansRegular");
                    fonts.AddFont("OpenSans-SemiBold.ttf", "OpenSansSemiBold");
                    fonts.AddFont("STXIHEI.TTF", "ChineseFont");
                });

#if DEBUG
            builder.Logging.AddDebug();
#endif

            return builder.Build();
        }
    }
}


# --- Controls\CustomCalendarView.xaml ---
<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FMS.Mobile.Controls.CustomCalendarView"
             x:Name="CalendarRoot">

    <VerticalStackLayout>
        <!-- 年月切换控件 -->
        <Grid ColumnDefinitions="Auto,*,Auto" Padding="10" VerticalOptions="Center">
            <Button Text="&lt;" Clicked="OnPrevMonthClicked" />
            <Label x:Name="MonthLabel" FontSize="18" HorizontalOptions="Center" Grid.Column="1">
                <Label.GestureRecognizers>
                    <TapGestureRecognizer Tapped="OnMonthLabelTapped" />
                </Label.GestureRecognizers>
            </Label>
            <Button Text=">" Clicked="OnNextMonthClicked" Grid.Column="2" />
        </Grid>

        <!-- 星期标题 -->
        <Grid ColumnDefinitions="*,*,*,*,*,*,*" Padding="5">
            <Label Text="日" HorizontalTextAlignment="Center" FontSize="13" />
            <Label Text="一" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="1" />
            <Label Text="二" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="2" />
            <Label Text="三" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="3" />
            <Label Text="四" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="4" />
            <Label Text="五" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="5" />
            <Label Text="六" HorizontalTextAlignment="Center" FontSize="13" Grid.Column="6" />
        </Grid>

        <!-- 日期网格 -->
        <Grid x:Name="DateGrid" Padding="5" RowSpacing="5" ColumnSpacing="5" />
    </VerticalStackLayout>
</ContentView>


# --- Controls\CustomCalendarView.xaml.cs ---
using System;
using System.Collections.Generic;
using System.Globalization;
using Microsoft.Maui.Controls;

namespace FMS.Mobile.Controls
{
    public partial class CustomCalendarView : ContentView
    {
        public static readonly BindableProperty SelectedDateProperty =
            BindableProperty.Create(nameof(SelectedDate),
                                    typeof(DateTime),
                                    typeof(CustomCalendarView),
                                    DateTime.Today, BindingMode.TwoWay);

        public static readonly BindableProperty DailyMapProperty =
            BindableProperty.Create(nameof(DailyMap),
                                    typeof(Dictionary<DateOnly, decimal>),
                                    typeof(CustomCalendarView),
                                    new Dictionary<DateOnly, decimal>(),
                                    propertyChanged: OnDailyMapChanged);

        public static readonly BindableProperty DisplayMonthProperty =
        BindableProperty.Create(nameof(DisplayMonth),
                                typeof(DateTime),
                                typeof(CustomCalendarView),
                                DateTime.Today,
                                propertyChanged: OnDisplayMonthChanged);

        private bool _autoSelect;//用于区分当前是否正在切换月份以在BuildCalendar方法中自动选择日期

        public DateTime DisplayMonth
        {
            get => (DateTime)GetValue(DisplayMonthProperty);
            set => SetValue(DisplayMonthProperty, value);
        }
        private static void OnDisplayMonthChanged(BindableObject bindable, object oldValue, object newValue)
        {
            if (bindable is CustomCalendarView view && newValue is DateTime newMonth)
            {
                view._displayMonth = new DateTime(newMonth.Year, newMonth.Month, 1); // ✅ 赋值核心变量
                view.MonthLabel.Text = newMonth.ToString("yyyy年M月");                // ✅ 更新标题
                view._autoSelect = true;                                             // ✅ 自动选中第一天
                view.BuildCalendar();                                                // ✅ 重建日历网格
            }
        }

        //当前选中的日期
        public DateTime SelectedDate
        {
            get => (DateTime)GetValue(SelectedDateProperty);
            set => SetValue(SelectedDateProperty, value);
        }

        public Dictionary<DateOnly, decimal> DailyMap
        {
            get => (Dictionary<DateOnly, decimal>)GetValue(DailyMapProperty);
            set => SetValue(DailyMapProperty, value);
        }

        private DateTime _displayMonth;//当前选中年月的第一天？
        private readonly List<Button> _buttonPool = new();
        private readonly Dictionary<DateTime, Button> _dateButtons = new();

        //构造函数
        public CustomCalendarView()
        {
            InitializeComponent();
            _displayMonth = new DateTime(SelectedDate.Year, SelectedDate.Month, 1);
            BuildCalendar();
        }

        /// <summary>
        /// 上一个月份按钮
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnPrevMonthClicked(object sender, EventArgs e)
        {
            _displayMonth = _displayMonth.AddMonths(-1);
            BuildCalendar();
        }
        /// <summary>
        /// 下一个月份按钮
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnNextMonthClicked(object sender, EventArgs e)
        {
            _displayMonth = _displayMonth.AddMonths(1);
            BuildCalendar();
        }

        /// <summary>
        /// 单击年月标签，弹出年份选择框
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private async void OnMonthLabelTapped(object sender, EventArgs e)
        {
            var yearList = new List<string>();
            for (int y = 2024; y <= DateTime.Now.Year; y++)
                yearList.Add(y.ToString());

            string selected = await Shell.Current.DisplayActionSheet("选择年份", "取消", null, yearList.ToArray());

            if (int.TryParse(selected, out int year) && (year != SelectedDate.Year))//修改年份时，重绘界面
            {
                _displayMonth = new DateTime(year, _displayMonth.Month, 1);
                BuildCalendar();
            }
        }

        /// <summary>
        /// 在页面上绘制控件中的日历视图
        /// </summary>
        private void BuildCalendar()
        {
            MonthLabel.Text = _displayMonth.ToString("yyyy年M月", CultureInfo.CurrentCulture);
            DateGrid.Children.Clear();
            _dateButtons.Clear();

            //绘制六行七列grid
            if (DateGrid.RowDefinitions.Count == 0)
            {
                for (int i = 0; i < 6; i++)
                    DateGrid.RowDefinitions.Add(new RowDefinition(GridLength.Star));
            }
            if (DateGrid.ColumnDefinitions.Count == 0)
            {
                for (int i = 0; i < 7; i++)
                    DateGrid.ColumnDefinitions.Add(new ColumnDefinition(GridLength.Star));
            }

            DateTime firstDay = new DateTime(_displayMonth.Year, _displayMonth.Month, 1);
            int daysCount = DateTime.DaysInMonth(_displayMonth.Year, _displayMonth.Month);//当前月份的日数
            int col = (int)firstDay.DayOfWeek;//获取每个月1号所在的列
            int row = 0;//每个月1号放在第1行

            int poolIndex = 0;//计算已绘制的button数量

            for (int i = 1; i <= daysCount; i++)//遍历绘制每天的按钮
            {
                DateTime currentDate = new DateTime(_displayMonth.Year, _displayMonth.Month, i);//获取当前正在绘制的日期
                Button btn;

                if (poolIndex < _buttonPool.Count)//如果已经有绘制好的按钮，则直接使用
                {
                    btn = _buttonPool[poolIndex];
                }
                else//否侧重新绘制按钮
                {
                    btn = new Button
                    {
                        FontSize = 18,
                        Padding = 0,
                        Margin = new Thickness(6),
                        CornerRadius = 9999,
                        HorizontalOptions = LayoutOptions.Center,
                        VerticalOptions = LayoutOptions.Center,
                        WidthRequest = 40,
                        HeightRequest = 40
                    };
                    btn.Clicked += OnDateClicked;
                    _buttonPool.Add(btn);//在已绘制列表中加入刚创建的button
                }

                btn.Text = i.ToString();//设置按钮文本为当前日期的日
                btn.CommandParameter = currentDate;//设置按钮的命令参数为当前日期

                //在视图中添加当前日期的按钮
                Grid.SetRow(btn, row);
                Grid.SetColumn(btn, col);
                DateGrid.Children.Add(btn);
                _dateButtons[currentDate] = btn;

                col++;
                if (col > 6)
                {
                    col = 0;
                    row++;
                }

                poolIndex++;
            }


            if (_autoSelect) // 仅当不是用户操作时，自动选中
            {
                DateTime newDate = (DateTime.Today.Month == _displayMonth.Month && DateTime.Today.Year == _displayMonth.Year)
                ? DateTime.Today
                : new DateTime(_displayMonth.Year, _displayMonth.Month, 1);

                if (SelectedDate != newDate)
                    SelectedDate = newDate;
            }
            UpdateSelectionVisual();
        }

        /// <summary>
        /// 绘制选中日期的视觉效果，包含背景色和文本颜色的设置
        /// </summary>
        private void UpdateSelectionVisual()
        {
            _autoSelect = true; // 重置标志位
            foreach (var kvp in _dateButtons)//遍历已添加的按钮
            {
                Button btn = kvp.Value;
                DateTime date = kvp.Key;
                if (date.Date == SelectedDate.Date)//如果当前遍历的日期等于选中日期，则设置选中样式为选中
                {
                    btn.BackgroundColor = (date.Date == DateTime.Today.Date) ? //如果选中日期是今天，则使用主题色，否则使用浅蓝色
                        Application.Current.Resources["Primary"] as Color : Colors.LightBlue;

                    btn.TextColor = Colors.White;
                }
                else if (date.Date == DateTime.Today.Date)
                {
                    btn.BackgroundColor = Colors.Transparent;
                    btn.TextColor = Colors.Red;
                }
                else
                {
                    btn.BackgroundColor = Colors.Transparent;
                    btn.TextColor = Colors.Black;
                }
            }
        }

        /// <summary>
        /// 单击某个日期按钮时触发，更新选中日期并刷新视觉效果
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OnDateClicked(object sender, EventArgs e)
        {
            if (sender is Button btn && btn.CommandParameter is DateTime dt)
            {
                _autoSelect = false; // 按下的是日期按钮，禁止自动选择
                if (SelectedDate != dt)//仅在选中日期发生变化时更新界面
                {
                    SelectedDate = dt;
                    UpdateSelectionVisual();
                }
            }
        }

        private static void OnDailyMapChanged(BindableObject bindable, object oldValue, object newValue)
        {
            if (bindable is CustomCalendarView calendar)
            {
                calendar.BuildCalendar(); // 刷新 UI（或你自己的刷新逻辑）
            }
        }
    }
}


# --- Converters\ZeroToVisibleConverter.cs ---
using System;
using System.Globalization;
using Microsoft.Maui.Controls;

namespace FMS.Mobile.Converters;

public class ZeroToVisibleConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int intValue)
            return intValue == 0;
        return false;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        return null;
    }
}


# --- Models\DoctorMonthlySummary.cs ---
﻿using System.Collections.Generic;

namespace FMS.Mobile.Models
{
    /// <summary>
    /// 当前月份医生营收汇总 DTO（对应服务端 DoctorMonthlySummaryDto）
    /// </summary>
    public class DoctorMonthlySummary
    {
        public int BusinessDays { get; set; }
        public decimal TotalMonthlyRevenue { get; set; }   // 仅调试用
        public int TotalMonthlyVisits { get; set; }        // 仅调试用

        public List<DoctorRow> Doctors { get; set; } = new();

        public class DoctorRow
        {
            public string Owner { get; set; } = string.Empty;
            public decimal TotalRevenue { get; set; }
            public int TotalVisits { get; set; }
        }
    }
}


# --- Models\MonthlySummary.cs ---
﻿namespace FMS.Mobile.Models
{
    public class MonthlySummary
    {
        public decimal TotalMonthly { get; set; }
        public decimal AverageDaily { get; set; }
        public Dictionary<DateOnly, decimal> DailyMap { get; set; } = new();
    }
}


# --- Platforms\Android\AndroidManifest.xml ---
﻿<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
	<application android:allowBackup="true" android:icon="@mipmap/appicon" android:roundIcon="@mipmap/appicon_round" android:supportsRtl="true" android:networkSecurityConfig="@xml/network_security_config">
		
	</application>
	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
	<uses-permission android:name="android.permission.INTERNET" />
	
	
</manifest>


# --- Platforms\Android\MainActivity.cs ---
﻿using Android.App;
using Android.Content.PM;
using Android.OS;

namespace FMS.Mobile
{
    [Activity(Theme = "@style/Maui.SplashTheme", MainLauncher = true, LaunchMode = LaunchMode.SingleTop, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation | ConfigChanges.UiMode | ConfigChanges.ScreenLayout | ConfigChanges.SmallestScreenSize | ConfigChanges.Density)]
    public class MainActivity : MauiAppCompatActivity
    {
    }
}


# --- Platforms\Android\MainApplication.cs ---
﻿using Android.App;
using Android.Runtime;

namespace FMS.Mobile
{
    [Application]
    public class MainApplication : MauiApplication
    {
        public MainApplication(IntPtr handle, JniHandleOwnership ownership)
            : base(handle, ownership)
        {
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }
}


# --- Platforms\Android\Resources\values\colors.xml ---
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <color name="colorPrimary">#512BD4</color>
    <color name="colorPrimaryDark">#2B0B98</color>
    <color name="colorAccent">#2B0B98</color>
</resources>

# --- Platforms\Android\Resources\xml\network_security_config.xml ---
<?xml version="1.0" encoding="utf-8" ?>
<network-security-config>
	<base-config cleartextTrafficPermitted="true" />
</network-security-config>

# --- Platforms\Windows\App.xaml ---
﻿<maui:MauiWinUIApplication
    x:Class="FMS.Mobile.WinUI.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:maui="using:Microsoft.Maui"
    xmlns:local="using:FMS.Mobile.WinUI">

</maui:MauiWinUIApplication>


# --- Platforms\Windows\App.xaml.cs ---
﻿using Microsoft.UI.Xaml;

// To learn more about WinUI, the WinUI project structure,
// and more about our project templates, see: http://aka.ms/winui-project-info.

namespace FMS.Mobile.WinUI
{
    /// <summary>
    /// Provides application-specific behavior to supplement the default Application class.
    /// </summary>
    public partial class App : MauiWinUIApplication
    {
        /// <summary>
        /// Initializes the singleton application object.  This is the first line of authored code
        /// executed, and as such is the logical equivalent of main() or WinMain().
        /// </summary>
        public App()
        {
            this.InitializeComponent();
        }

        protected override MauiApp CreateMauiApp() => MauiProgram.CreateMauiApp();
    }

}


# --- Properties\launchSettings.json ---
{
  "profiles": {
    "Windows Machine": {
      "commandName": "MsixPackage",
      "nativeDebugging": false
    }
  }
}

# --- Resources\AppIcon\appicon.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg width="456" height="456" viewBox="0 0 456 456" version="1.1" xmlns="http://www.w3.org/2000/svg">
    <rect x="0" y="0" width="456" height="456" fill="#512BD4" />
</svg>

# --- Resources\AppIcon\appiconfg.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="456" height="456" viewBox="0 0 456 456" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
    <path d="m 105.50037,281.60863 c -2.70293,0 -5.00091,-0.90042 -6.893127,-2.70209 -1.892214,-1.84778 -2.837901,-4.04181 -2.837901,-6.58209 0,-2.58722 0.945687,-4.80389 2.837901,-6.65167 1.892217,-1.84778 4.190197,-2.77167 6.893127,-2.77167 2.74819,0 5.06798,0.92389 6.96019,2.77167 1.93749,1.84778 2.90581,4.06445 2.90581,6.65167 0,2.54028 -0.96832,4.73431 -2.90581,6.58209 -1.89221,1.80167 -4.212,2.70209 -6.96019,2.70209 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="M 213.56111,280.08446 H 195.99044 L 149.69953,207.0544 c -1.17121,-1.84778 -2.14037,-3.76515 -2.90581,-5.75126 h -0.40578 c 0.36051,2.12528 0.54076,6.67515 0.54076,13.6496 v 65.13172 h -15.54349 v -99.36009 h 18.71925 l 44.7374,71.29798 c 1.89222,2.95695 3.1087,4.98917 3.64945,6.09751 h 0.26996 c -0.45021,-2.6325 -0.67573,-7.09015 -0.67573,-13.37293 v -64.02256 h 15.47557 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="m 289.25134,280.08446 h -54.40052 v -99.36009 h 52.23835 v 13.99669 h -36.15411 v 28.13085 h 33.31621 v 13.9271 h -33.31621 v 29.37835 h 38.31628 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="M 366.56466,194.72106 H 338.7222 v 85.3634 h -16.08423 v -85.3634 h -27.77455 v -13.99669 h 71.70124 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
</svg>

# --- Resources\Splash\splash.svg ---
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg width="456" height="456" viewBox="0 0 456 456" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" xmlns:serif="http://www.serif.com/" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;">
    <path d="m 105.50037,281.60863 c -2.70293,0 -5.00091,-0.90042 -6.893127,-2.70209 -1.892214,-1.84778 -2.837901,-4.04181 -2.837901,-6.58209 0,-2.58722 0.945687,-4.80389 2.837901,-6.65167 1.892217,-1.84778 4.190197,-2.77167 6.893127,-2.77167 2.74819,0 5.06798,0.92389 6.96019,2.77167 1.93749,1.84778 2.90581,4.06445 2.90581,6.65167 0,2.54028 -0.96832,4.73431 -2.90581,6.58209 -1.89221,1.80167 -4.212,2.70209 -6.96019,2.70209 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="M 213.56111,280.08446 H 195.99044 L 149.69953,207.0544 c -1.17121,-1.84778 -2.14037,-3.76515 -2.90581,-5.75126 h -0.40578 c 0.36051,2.12528 0.54076,6.67515 0.54076,13.6496 v 65.13172 h -15.54349 v -99.36009 h 18.71925 l 44.7374,71.29798 c 1.89222,2.95695 3.1087,4.98917 3.64945,6.09751 h 0.26996 c -0.45021,-2.6325 -0.67573,-7.09015 -0.67573,-13.37293 v -64.02256 h 15.47557 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="m 289.25134,280.08446 h -54.40052 v -99.36009 h 52.23835 v 13.99669 h -36.15411 v 28.13085 h 33.31621 v 13.9271 h -33.31621 v 29.37835 h 38.31628 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
    <path d="M 366.56466,194.72106 H 338.7222 v 85.3634 h -16.08423 v -85.3634 h -27.77455 v -13.99669 h 71.70124 z" style="fill:#ffffff;fill-rule:nonzero;stroke-width:0.838376" />
</svg>

# --- Resources\Styles\Colors.xaml ---
﻿<?xml version="1.0" encoding="UTF-8" ?>
<?xaml-comp compile="true" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml">

    <!-- Note: For Android please see also Platforms\Android\Resources\values\colors.xml -->

    <Color x:Key="Primary">#512BD4</Color>
    <Color x:Key="PrimaryDark">#ac99ea</Color>
    <Color x:Key="PrimaryDarkText">#242424</Color>
    <Color x:Key="Secondary">#DFD8F7</Color>
    <Color x:Key="SecondaryDarkText">#9880e5</Color>
    <Color x:Key="Tertiary">#2B0B98</Color>

    <Color x:Key="White">White</Color>
    <Color x:Key="Black">Black</Color>
    <Color x:Key="Magenta">#D600AA</Color>
    <Color x:Key="MidnightBlue">#190649</Color>
    <Color x:Key="OffBlack">#1f1f1f</Color>

    <Color x:Key="Gray100">#E1E1E1</Color>
    <Color x:Key="Gray200">#C8C8C8</Color>
    <Color x:Key="Gray300">#ACACAC</Color>
    <Color x:Key="Gray400">#919191</Color>
    <Color x:Key="Gray500">#6E6E6E</Color>
    <Color x:Key="Gray600">#404040</Color>
    <Color x:Key="Gray900">#212121</Color>
    <Color x:Key="Gray950">#141414</Color>

    <SolidColorBrush x:Key="PrimaryBrush" Color="{StaticResource Primary}"/>
    <SolidColorBrush x:Key="SecondaryBrush" Color="{StaticResource Secondary}"/>
    <SolidColorBrush x:Key="TertiaryBrush" Color="{StaticResource Tertiary}"/>
    <SolidColorBrush x:Key="WhiteBrush" Color="{StaticResource White}"/>
    <SolidColorBrush x:Key="BlackBrush" Color="{StaticResource Black}"/>

    <SolidColorBrush x:Key="Gray100Brush" Color="{StaticResource Gray100}"/>
    <SolidColorBrush x:Key="Gray200Brush" Color="{StaticResource Gray200}"/>
    <SolidColorBrush x:Key="Gray300Brush" Color="{StaticResource Gray300}"/>
    <SolidColorBrush x:Key="Gray400Brush" Color="{StaticResource Gray400}"/>
    <SolidColorBrush x:Key="Gray500Brush" Color="{StaticResource Gray500}"/>
    <SolidColorBrush x:Key="Gray600Brush" Color="{StaticResource Gray600}"/>
    <SolidColorBrush x:Key="Gray900Brush" Color="{StaticResource Gray900}"/>
    <SolidColorBrush x:Key="Gray950Brush" Color="{StaticResource Gray950}"/>
</ResourceDictionary>

# --- Resources\Styles\Styles.xaml ---
﻿<?xml version="1.0" encoding="UTF-8" ?>
<?xaml-comp compile="true" ?>
<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml">

    <Style TargetType="ActivityIndicator">
        <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
    </Style>

    <Style TargetType="IndicatorView">
        <Setter Property="IndicatorColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}"/>
        <Setter Property="SelectedIndicatorColor" Value="{AppThemeBinding Light={StaticResource Gray950}, Dark={StaticResource Gray100}}"/>
    </Style>

    <Style TargetType="Border">
        <Setter Property="Stroke" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}" />
        <Setter Property="StrokeShape" Value="Rectangle"/>
        <Setter Property="StrokeThickness" Value="1"/>
    </Style>

    <Style TargetType="BoxView">
        <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Gray950}, Dark={StaticResource Gray200}}" />
    </Style>

    <Style TargetType="Button">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource PrimaryDarkText}}" />
        <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource PrimaryDark}}" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderWidth" Value="0"/>
        <Setter Property="CornerRadius" Value="8"/>
        <Setter Property="Padding" Value="14,10"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray950}, Dark={StaticResource Gray200}}" />
                            <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="PointerOver" />
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="Color" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="DatePicker">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource White}}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Editor">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource White}}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="PlaceholderColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Entry">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource White}}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="PlaceholderColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Frame">
        <Setter Property="HasShadow" Value="False" />
        <Setter Property="BorderColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray950}}" />
        <Setter Property="CornerRadius" Value="8" />
        <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Black}}" />
    </Style>

    <Style TargetType="ImageButton">
        <Setter Property="Opacity" Value="1" />
        <Setter Property="BorderColor" Value="Transparent"/>
        <Setter Property="BorderWidth" Value="0"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="Opacity" Value="0.5" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="PointerOver" />
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Label">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource White}}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Span">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource White}}" />
    </Style>

    <Style TargetType="Label" x:Key="Headline">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource MidnightBlue}, Dark={StaticResource White}}" />
        <Setter Property="FontSize" Value="32" />
        <Setter Property="HorizontalOptions" Value="Center" />
        <Setter Property="HorizontalTextAlignment" Value="Center" />
    </Style>

    <Style TargetType="Label" x:Key="SubHeadline">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource MidnightBlue}, Dark={StaticResource White}}" />
        <Setter Property="FontSize" Value="24" />
        <Setter Property="HorizontalOptions" Value="Center" />
        <Setter Property="HorizontalTextAlignment" Value="Center" />
    </Style>

    <Style TargetType="ListView">
        <Setter Property="SeparatorColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray500}}" />
        <Setter Property="RefreshControlColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource Gray200}}" />
    </Style>

    <Style TargetType="Picker">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource White}}" />
        <Setter Property="TitleColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource Gray200}}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                            <Setter Property="TitleColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="ProgressBar">
        <Setter Property="ProgressColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="ProgressColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="RadioButton">
        <Setter Property="BackgroundColor" Value="Transparent"/>
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource White}}" />
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="RefreshView">
        <Setter Property="RefreshColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource Gray200}}" />
    </Style>

    <Style TargetType="SearchBar">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource White}}" />
        <Setter Property="PlaceholderColor" Value="{StaticResource Gray500}" />
        <Setter Property="CancelButtonColor" Value="{StaticResource Gray500}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                            <Setter Property="PlaceholderColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="SearchHandler">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource White}}" />
        <Setter Property="PlaceholderColor" Value="{StaticResource Gray500}" />
        <Setter Property="BackgroundColor" Value="Transparent" />
        <Setter Property="FontFamily" Value="OpenSansRegular" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                            <Setter Property="PlaceholderColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Shadow">
        <Setter Property="Radius" Value="15" />
        <Setter Property="Opacity" Value="0.5" />
        <Setter Property="Brush" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource White}}" />
        <Setter Property="Offset" Value="10,10" />
    </Style>

    <Style TargetType="Slider">
        <Setter Property="MinimumTrackColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
        <Setter Property="MaximumTrackColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray600}}" />
        <Setter Property="ThumbColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="MinimumTrackColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}"/>
                            <Setter Property="MaximumTrackColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}"/>
                            <Setter Property="ThumbColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}"/>
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="SwipeItem">
        <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Black}}" />
    </Style>

    <Style TargetType="Switch">
        <Setter Property="OnColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
        <Setter Property="ThumbColor" Value="{StaticResource White}" />
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="OnColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                            <Setter Property="ThumbColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="On">
                        <VisualState.Setters>
                            <Setter Property="OnColor" Value="{AppThemeBinding Light={StaticResource Secondary}, Dark={StaticResource Gray200}}" />
                            <Setter Property="ThumbColor" Value="{AppThemeBinding Light={StaticResource Primary}, Dark={StaticResource White}}" />
                        </VisualState.Setters>
                    </VisualState>
                    <VisualState x:Name="Off">
                        <VisualState.Setters>
                            <Setter Property="ThumbColor" Value="{AppThemeBinding Light={StaticResource Gray400}, Dark={StaticResource Gray500}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="TimePicker">
        <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource White}}" />
        <Setter Property="BackgroundColor" Value="Transparent"/>
        <Setter Property="FontFamily" Value="OpenSansRegular"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinimumHeightRequest" Value="44"/>
        <Setter Property="MinimumWidthRequest" Value="44"/>
        <Setter Property="VisualStateManager.VisualStateGroups">
            <VisualStateGroupList>
                <VisualStateGroup x:Name="CommonStates">
                    <VisualState x:Name="Normal" />
                    <VisualState x:Name="Disabled">
                        <VisualState.Setters>
                            <Setter Property="TextColor" Value="{AppThemeBinding Light={StaticResource Gray300}, Dark={StaticResource Gray600}}" />
                        </VisualState.Setters>
                    </VisualState>
                </VisualStateGroup>
            </VisualStateGroupList>
        </Setter>
    </Style>

    <Style TargetType="Page" ApplyToDerivedTypes="True">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource OffBlack}}" />
    </Style>

    <Style TargetType="Shell" ApplyToDerivedTypes="True">
        <Setter Property="Shell.BackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource OffBlack}}" />
        <Setter Property="Shell.ForegroundColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource SecondaryDarkText}}" />
        <Setter Property="Shell.TitleColor" Value="{AppThemeBinding Light={StaticResource Black}, Dark={StaticResource SecondaryDarkText}}" />
        <Setter Property="Shell.DisabledColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray950}}" />
        <Setter Property="Shell.UnselectedColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray200}}" />
        <Setter Property="Shell.NavBarHasShadow" Value="False" />
        <Setter Property="Shell.TabBarBackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Black}}" />
        <Setter Property="Shell.TabBarForegroundColor" Value="{AppThemeBinding Light={StaticResource Magenta}, Dark={StaticResource White}}" />
        <Setter Property="Shell.TabBarTitleColor" Value="{AppThemeBinding Light={StaticResource Magenta}, Dark={StaticResource White}}" />
        <Setter Property="Shell.TabBarUnselectedColor" Value="{AppThemeBinding Light={StaticResource Gray900}, Dark={StaticResource Gray200}}" />
    </Style>

    <Style TargetType="NavigationPage">
        <Setter Property="BarBackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource OffBlack}}" />
        <Setter Property="BarTextColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource White}}" />
        <Setter Property="IconColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource White}}" />
    </Style>

    <Style TargetType="TabbedPage">
        <Setter Property="BarBackgroundColor" Value="{AppThemeBinding Light={StaticResource White}, Dark={StaticResource Gray950}}" />
        <Setter Property="BarTextColor" Value="{AppThemeBinding Light={StaticResource Magenta}, Dark={StaticResource White}}" />
        <Setter Property="UnselectedTabColor" Value="{AppThemeBinding Light={StaticResource Gray200}, Dark={StaticResource Gray950}}" />
        <Setter Property="SelectedTabColor" Value="{AppThemeBinding Light={StaticResource Gray950}, Dark={StaticResource Gray200}}" />
    </Style>

</ResourceDictionary>


# --- Services\ApiService.cs ---

using FMS.Mobile.Models;
using Newtonsoft.Json;

namespace FMS.Mobile.Services;

public class ApiService
{
    private readonly HttpClient _httpClient;

    public ApiService()
    {
#if WINDOWS
        _httpClient = new HttpClient { BaseAddress = new Uri("http://127.0.0.1:7050") };
#elif ANDROID
        _httpClient = new HttpClient { BaseAddress = new Uri("http://192.168.50.203:7050") };//̨ʽ
        //_httpClient = new HttpClient { BaseAddress = new Uri("http://192.168.90.114:7050") };//ʼǱ
        //_httpClient = new HttpClient { BaseAddress = new Uri("http://1.94.145.54:7050") };//
#else
        _httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7051") };
#endif
    }

    /// <summary>
    /// ȡָµ¶ժҪ
    /// </summary>
    public async Task<MonthlySummary?> GetMonthlySummaryAsync(DateOnly date)
    {
        var response = await _httpClient.GetAsync($"/api/revenue/home/summary/monthly?date={date}");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<MonthlySummary>(json);
        }
        else
        {
            throw new HttpRequestException($"ʧ: {response.StatusCode} - {response.ReasonPhrase}");
        }
    }

    /// <summary>
    /// ȡǰ·ҽӪջܡ
    /// </summary>
    public async Task<DoctorMonthlySummary?> GetDoctorSummaryCurrentMonthAsync()
    {
        HttpResponseMessage response = await _httpClient.GetAsync("/api/revenue/doctors/summary/currentMonth");
        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            DoctorMonthlySummary? dto = JsonConvert.DeserializeObject<DoctorMonthlySummary>(json);
            return dto;
        }

        throw new HttpRequestException($"ȡҽʧ: {response.StatusCode} - {response.ReasonPhrase}");
    }

    /// <summary>
    /// 
    /// </summary>
    public async Task<DoctorMonthlySummary?> GetDoctorSummaryAsync(int year, int month)
    {
        HttpResponseMessage response =
            await _httpClient.GetAsync($"/api/revenue/doctors/summary?year={year}&month={month}");
        if (response.IsSuccessStatusCode)
        {
            string json = await response.Content.ReadAsStringAsync();
            return JsonConvert.DeserializeObject<DoctorMonthlySummary>(json);
        }
        throw new HttpRequestException($"ȡҽʧ: {response.StatusCode} - {response.ReasonPhrase}");
    }

}


# --- ViewModels\DashboardViewModel.cs ---

using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.Messaging;
using FMS.Mobile.Models;
using FMS.Mobile.Services;
using System;
using System.Threading.Tasks;
using FMS.Mobile.Messages;


namespace FMS.Mobile.ViewModels
{
    public partial class DashboardViewModel : ObservableObject
    {
        private readonly ApiService _apiService;//接口服务实例

        [ObservableProperty] private decimal totalMonthly;

        [ObservableProperty] private DateTime displayMonth; 

        [ObservableProperty] private decimal totalToday;

        [ObservableProperty] private decimal averageDaily;

        [ObservableProperty] private DateTime selectedDate = DateTime.Today;//初始化时，默认选中今天

        [ObservableProperty] private Dictionary<DateOnly, decimal> dailyMap = new();

        private DateOnly currentMonth;
        private DateTime _loadingMonth = DateTime.MinValue;

        public DashboardViewModel()
        {
            _apiService = new ApiService();
            LoadSummaryAsync();//初始化获取数据
        }

        /// <summary>
        /// 钩子方法，当 SelectedDate 属性改变时调用
        /// </summary>
        /// <param name="value"></param>
        partial void OnSelectedDateChanged(DateTime value)
        {
            DisplayMonth = new DateTime(value.Year, value.Month, 1);  // ✅ 同步控件月份显示

            if (value.Month != currentMonth.Month || value.Year != currentMonth.Year)
            {
                LoadSummaryAsync(); 
            }
            else
            {
                ChangeSelectedDate();
            }
        }


        /// <summary>
        /// 在同一个月内切换日期时调用，从本地缓存中获取数据
        /// </summary>
        private void ChangeSelectedDate()
        {
            DateOnly date = DateOnly.FromDateTime(SelectedDate);//获取当前选中的日期
            TotalToday = DailyMap.ContainsKey(date) ? DailyMap[date] : 0;//如果今天有数据则显示，否则为0
        }

        /// <summary>
        /// 切换月份时调用，重新加载整月数据
        /// </summary>
        /// <returns></returns>
        private async Task LoadSummaryAsync()
        {
            DateOnly date = DateOnly.FromDateTime(SelectedDate);
            DateTime thisMonth = new(date.Year, date.Month, 1);
            if (_loadingMonth == thisMonth) return;
            _loadingMonth = thisMonth;

            try
            {
                MonthlySummary? result = await _apiService.GetMonthlySummaryAsync(date);
                if (result == null)
                {
                    await Shell.Current.DisplayAlert("提示", "未找到本月数据。", "确定");
                    return;
                }

                TotalMonthly = result.TotalMonthly;
                AverageDaily = result.AverageDaily;
                DailyMap = result.DailyMap;
                currentMonth = date;

                DisplayMonth = thisMonth;

                WeakReferenceMessenger.Default.Send(new MonthChangedMessage(thisMonth));

                TotalToday = DailyMap.ContainsKey(date) ? DailyMap[date] : 0;
                if (TotalToday == 0 && date == DateOnly.FromDateTime(DateTime.Now))
                    await Shell.Current.DisplayAlert("提示", "今天还没有收入记录，请稍后查看。", "确定");
            }
            catch (HttpRequestException ex)
            {
                Console.WriteLine($"[网络错误] {ex.Message}");
                await Shell.Current.DisplayAlert("错误", $"无法连接到服务器。{ex.Message}", "确定");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[系统错误] {ex.Message}");
                await Shell.Current.DisplayAlert("错误", "加载数据时出现异常。", "确定");
            }
        }
    }
}


# --- ViewModels\DoctorViewModel.cs ---
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CommunityToolkit.Mvvm.Messaging;
using FMS.Mobile.Messages;
using FMS.Mobile.Models;
using FMS.Mobile.Services;
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace FMS.Mobile.ViewModels
{
    /// <summary>
    /// Doctor 页面 VM：负责加载当前月份医生营收汇总
    /// </summary>
    public partial class DoctorViewModel : ObservableObject
    {
        private readonly ApiService _api = new ApiService();

        [ObservableProperty] private DateTime selectedMonth = DateTime.Today;

        [ObservableProperty] private int businessDays;

        public DoctorViewModel()
        {
            // 构造时异步加载（不 await，避免阻塞 UI）
            _ = LoadSummaryAsync();   // 默认当月
            RecordMonth();
                
            WeakReferenceMessenger.Default.Register<MonthChangedMessage>(this, (r, m) =>
            {
                DateTime monthFirst = m.Value;
                if (SelectedMonth.Year != monthFirst.Year || SelectedMonth.Month != monthFirst.Month)
                {
                    SelectedMonth = monthFirst;
                    _ = LoadSummaryAsync();
                }
            });
        }

        [RelayCommand]
        private void PrevMonth()
        {
            SelectedMonth = SelectedMonth.AddMonths(-1);
            _ = LoadSummaryAsync();
            RecordMonth();
        }

        [RelayCommand]
        private void NextMonth()
        {
            SelectedMonth = SelectedMonth.AddMonths(1);
            _ = LoadSummaryAsync();
            RecordMonth();
        }

        [ObservableProperty]
        private ObservableCollection<DoctorMonthlySummary.DoctorRow> doctors
            = new ObservableCollection<DoctorMonthlySummary.DoctorRow>();

        // 调试用：总营收与总人次（界面暂不展示）
        [ObservableProperty] private decimal totalMonthlyRevenue;
        [ObservableProperty] private int totalMonthlyVisits;

        private void RecordMonth()
        {
            AppState.LastDoctorMonth = new DateTime(SelectedMonth.Year, SelectedMonth.Month, 1);
        }
        /// <summary>
        /// 调接口并填充属性
        /// </summary>
        private async Task LoadSummaryAsync()
        {
            try
            {
                int y = SelectedMonth.Year;
                int m = SelectedMonth.Month;

                DoctorMonthlySummary? dto = await _api.GetDoctorSummaryAsync(y, m);
                if (dto == null) return;

                BusinessDays = dto.BusinessDays;
                TotalMonthlyRevenue = dto.TotalMonthlyRevenue;
                TotalMonthlyVisits = dto.TotalMonthlyVisits;

                Doctors.Clear();
                foreach (DoctorMonthlySummary.DoctorRow row in dto.Doctors)
                    Doctors.Add(row);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"[DoctorVM] 读取失败: {ex.Message}");
            }
        }
    }
}


# --- Views\DashboardPage.xaml ---
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodels="clr-namespace:FMS.Mobile.ViewModels"
             xmlns:sys="clr-namespace:System;assembly=netstandard"
             xmlns:toolkit="http://schemas.microsoft.com/dotnet/2022/maui/toolkit"
             xmlns:views="clr-namespace:CommunityToolkit.Maui.Views;assembly=CommunityToolkit.Maui"
             xmlns:controls="clr-namespace:FMS.Mobile.Controls"
             x:Class="FMS.Mobile.Views.DashboardPage">

    <ContentPage.BindingContext>
        <viewmodels:DashboardViewModel />
    </ContentPage.BindingContext>

    <ScrollView>
        <VerticalStackLayout Padding="18" Spacing="8">

            <Label Text="月度总营收" FontSize="18" />
            <Label Text="{Binding TotalMonthly, StringFormat='{}{0:C}'}" FontSize="24" FontAttributes="Bold" Margin="0,0,0,3"/>

            <Label Text="今日总营收" FontSize="18" />
            <Label Text="{Binding TotalToday, StringFormat='{}{0:C}'}" FontSize="24" FontAttributes="Bold" Margin="0,0,0,3"/>

            <Label Text="本月日均" FontSize="18" />
            <Label Text="{Binding AverageDaily, StringFormat='{}{0:C}'}" FontSize="24" FontAttributes="Bold" Margin="0,0,0,3"/>


            <controls:CustomCalendarView DailyMap ="{Binding DailyMap}" DisplayMonth="{Binding SelectedDate}" SelectedDate="{Binding SelectedDate}" />


        </VerticalStackLayout>
    </ScrollView>
</ContentPage>


# --- Views\DashboardPage.xaml.cs ---
using FMS.Mobile.ViewModels;

namespace FMS.Mobile.Views;

public partial class DashboardPage : ContentPage
{
    public DashboardPage()
    {
        InitializeComponent();
    }

    protected override void OnAppearing()
    {
        base.OnAppearing();

        if (BindingContext is DashboardViewModel vm &&
            AppState.LastDoctorMonth is DateTime doctorMonth)
        {
            //  Home ǰ·ҽҳͬл¼
            if (vm.SelectedDate.Year != doctorMonth.Year ||
                vm.SelectedDate.Month != doctorMonth.Month)
            {
                vm.SelectedDate = doctorMonth;   //  OnSelectedDateChanged  Զ LoadSummaryAsync
            }
        }
    }
}


# --- Views\DoctorPage.xaml ---
<?xml version="1.0" encoding="UTF-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:viewmodels="clr-namespace:FMS.Mobile.ViewModels"
             x:Class="FMS.Mobile.Views.DoctorPage">

    <ContentPage.BindingContext>
        <viewmodels:DoctorViewModel />
    </ContentPage.BindingContext>

    <ScrollView>
        <VerticalStackLayout Padding="18" Spacing="12">

            <!-- 顶部月份选择条 -->
            <Grid ColumnDefinitions="Auto,*,Auto" Padding="0,8">
                <Button Text="＜" Command="{Binding PrevMonthCommand}" />
                <Label Text="{Binding SelectedMonth, StringFormat='{}{0:yyyy年M月}'}"
                    HorizontalOptions="Center" FontSize="18" Grid.Column="1"/>
                <Button Text="＞" Command="{Binding NextMonthCommand}" Grid.Column="2" />
            </Grid>


            <!-- 本月营业天数 -->
            <Label Text="{Binding BusinessDays, StringFormat='本月营业天数：{0} 天'}"
                   FontSize="18"
                   FontAttributes="Bold" />

            <!-- 医生汇总列表 -->
            <CollectionView ItemsSource="{Binding Doctors}" Margin="0,4,0,0">
                <!-- 表头 -->
                <CollectionView.HeaderTemplate>
                    <DataTemplate>
                        <Grid ColumnDefinitions="*,110,70" Padding="0,4" ColumnSpacing="8">
                            <Label Text="医生"            FontAttributes="Bold"/>
                            <Label Text="总营收" Grid.Column="1" FontAttributes="Bold" HorizontalOptions="End"/>
                            <Label Text="总人次" Grid.Column="2" FontAttributes="Bold" HorizontalOptions="End"/>
                        </Grid>
                    </DataTemplate>
                </CollectionView.HeaderTemplate>

                <!-- 行模板 -->
                <CollectionView.ItemTemplate>
                    <DataTemplate>
                        <Grid ColumnDefinitions="*,110,70" Padding="0,4" ColumnSpacing="8">
                            <!-- 医生 -->
                            <Label Text="{Binding Owner}"                    />

                            <!-- 金额 -->
                            <Label x:Name="RevenueLabel"
                                   Text="{Binding TotalRevenue, StringFormat='￥{0:N2}'}"
                                   Grid.Column="1"
                                   HorizontalOptions="End"/>

                            <!-- 人次（整数）-->
                            <Label Text="{Binding TotalVisits, StringFormat='{0:N0}'}"
                                   Grid.Column="2"
                                   HorizontalOptions="End"/>
                        </Grid>

                       
                    </DataTemplate>
                </CollectionView.ItemTemplate>
            </CollectionView>


        </VerticalStackLayout>
    </ScrollView>
</ContentPage>


# --- Views\DoctorPage.xaml.cs ---
namespace FMS.Mobile.Views;

public partial class DoctorPage : ContentPage
{
    public DoctorPage()
    {
        InitializeComponent();
    }
}

# --- Views\TrendPage.xaml ---
<?xml version="1.0" encoding="UTF-8" ?>
<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="FMS.Mobile.Views.TrendPage">
    <ScrollView>
        <VerticalStackLayout Padding="20" Spacing="10">
            <Label Text="趋势图页面（待开发）" FontSize="24" HorizontalOptions="Center" VerticalOptions="CenterAndExpand" />
        </VerticalStackLayout>
    </ScrollView>
</ContentPage>

# --- Views\TrendPage.xaml.cs ---
namespace FMS.Mobile.Views;

public partial class TrendPage : ContentPage
{
    public TrendPage()
    {
        InitializeComponent();
    }
}