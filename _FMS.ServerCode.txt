### 文件索引
appsettings.Development.json
appsettings.json
FMS.Server.csproj
FMS.Server.http
Program.cs
Controllers\AppDbContextFactory.cs
Controllers\RevenueController.cs
Data\AppDbContext.cs
Migrations\20250521112114_InitialCreate.cs
Migrations\20250521112114_InitialCreate.Designer.cs
Migrations\20250523100605_AddIsVisitCountField.cs
Migrations\20250523100605_AddIsVisitCountField.Designer.cs
Migrations\20250524133635_RebuildRevenueStructure.cs
Migrations\20250524133635_RebuildRevenueStructure.Designer.cs
Migrations\AppDbContextModelSnapshot.cs
Models\RevenueRecord.cs
Models\Dtos\DoctorMonthlySummaryDto.cs
Models\Dtos\MonthlySummaryDto.cs

### 文件内容
   <EmbeddedResource Remove="Converter\**" />
    <None Remove="Converter\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ClosedXML" Version="0.105.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.5" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.5" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
  </ItemGroup>

</Project>


# --- FMS.Server.http ---
@FMS.Server_HostAddress = http://localhost:7050

### [HttpPost("import")]
### ڵ_________________ʹúݿдµ¼ʹ
POST {{FMS.Server_HostAddress}}/api/revenue/import
Content-Type: application/json

[
  {
    "owner": "к",
    "itemType": "ҽ",
    "value": 123.45,
    "date": "2025-06-01",
    "isVisitCount": false,
    "isExcludedFromSummary": false,
    "source": "Admin"
  },
  {
    "owner": "ҩ",
    "itemType": "˴",
    "value": 456.78,
    "date": "2025-06-21",
    "isVisitCount": true,
    "isExcludedFromSummary": false,
    "source": "Admin"
  }
]

### [HttpGet("query")]
### ѯ202411 ~ 131
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31
Accept: application/json
### ѯҽΪк죬ʱ䷶ΧΪ 20241
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31&owner=к
Accept: application/json
### ѯ Admin ¼ݣʱ䣩
GET http://localhost:7050/api/revenue/query?source=Admin
Accept: application/json
### ѯ20241µġ˴Ρ
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31&itemType=˴
Accept: application/json
### ѯȫݣգ
GET http://localhost:7050/api/revenue/query?
Accept: application/json


### Page Home
### [HttpGet("home/summary/monthly")]
### ȡ 2024  5 µÿսͳ
GET http://localhost:7050/api/revenue/home/summary/monthly?date=2024-05-01
Accept: application/json


### Page Doctors
### ȡǰ·ҽӪջ
GET http://localhost:7050/api/revenue/doctors/summary/currentMonth
Accept: application/json

###½ӿδʵ?????????????????????????????????????????/
### [HttpGet("doctors/monthly/visitcount")]
### ͳ˴Σ20245£
GET http://localhost:7050/api/revenue/doctors/monthly/visitcount?year=2024&month=5
Accept: application/json

###
GET http://localhost:7050/api/revenue/doctors/summary?date=2024-02-05


# --- Program.cs ---
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;

namespace FMS.Server
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // ע
            builder.Services.AddControllers();
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddDbContext<AppDbContext>(options =>
                options.UseSqlite("Data Source=fms.db"));

            // ʽ󶨼˿
            builder.WebHost.ConfigureKestrel(options =>
            {
                options.ListenAnyIP(7050); // HTTP
                options.ListenAnyIP(7051, listenOptions =>
                {
                    listenOptions.UseHttps(); // ÿ֤ HTTPS
                });
            });


            var app = builder.Build();

            //  Swagger
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            // м
            //app.UseHttpsRedirection();
            app.UseAuthorization();
            app.MapControllers();

            // 
            app.Run();
        }
    }
}



# --- Controllers\AppDbContextFactory.cs ---
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace FMS.Server.Data
{
    public class AppDbContextFactory : IDesignTimeDbContextFactory<AppDbContext>
    {
        public AppDbContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<AppDbContext>();
            optionsBuilder.UseSqlite("Data Source=fms.db");

            return new AppDbContext(optionsBuilder.Options);
        }
    }

}


# --- Controllers\RevenueController.cs ---
using ClosedXML.Excel;
using DocumentFormat.OpenXml.Wordprocessing;
using FMS.Server.Data;
using FMS.Server.Models;
using FMS.Server.Models.Dtos;
using FMS.Server.Models.Dtos.FMS.Server.Models.Dtos;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Globalization;

namespace FMS.Server.Controllers;

[ApiController]
[Route("api/revenue")]
public class RevenueController : ControllerBase
{
    private readonly AppDbContext _context;

    public RevenueController(AppDbContext context) { _context = context; }


    [HttpPost("import")]
    public async Task<IActionResult> ImportFromJson([FromBody] List<RevenueRecord> records)
    {
        if (records == null || records.Count == 0)
            return BadRequest(new { message = "上传数据为空" });

        // 标准化 Source
        foreach (var record in records)
        {
            if (string.IsNullOrWhiteSpace(record.Source))
                record.Source = "Admin";
        }

        // 查找所有与上传数据“字段完全一致”的已有记录
        var duplicateRecords = new List<RevenueRecord>();
        foreach (var r in records)
        {
            bool exists = await _context.RevenueRecords.AnyAsync(db =>
                db.Date == r.Date &&
                db.Value == r.Value &&
                db.Owner == r.Owner &&
                db.ItemType == r.ItemType &&
                db.IsVisitCount == r.IsVisitCount &&
                db.IsExcludedFromSummary == r.IsExcludedFromSummary &&
                db.Source == r.Source
            );
            if (exists) duplicateRecords.Add(r);
        }
        if (duplicateRecords.Count > 0)//若出现重复记录，则返回冲突状态码
        {
            return Conflict(new
            {
                message = "数据库中已存在重复记录，本次上传的所有数据未导入数据库。",
                duplicates = duplicateRecords.Select(d => new
                {
                    d.Date,
                    d.Value,
                    d.Owner,
                    d.ItemType,
                    d.IsVisitCount,
                    d.IsExcludedFromSummary,
                    d.Source
                })
            });
        }

        // 没有重复项，生成主键并保存
        foreach (var r in records)
            r.Id = Guid.NewGuid();

        try
        {
            await _context.RevenueRecords.AddRangeAsync(records);
            await _context.SaveChangesAsync();

            return Ok(new { message = "导入成功", count = records.Count });
        }
        catch (DbUpdateException ex)
        {
            return StatusCode(500, new { message = "数据库更新失败", error = ex.Message });
        }
        catch (Exception ex)
        {
            return StatusCode(500, new { message = "导入失败", error = ex.Message });
        }
    }


    /// <summary>
    /// query接口，用于查询收入记录数据。
    /// </summary>
    [HttpGet("query")]
    public async Task<IActionResult> Query(
    [FromQuery] DateOnly? start = null,
    [FromQuery] DateOnly? end = null,
    [FromQuery] string? owner = null,
    [FromQuery] string? source = null,
    [FromQuery] string? itemType = null)
    {
        var query = _context.RevenueRecords.AsQueryable();

        if (start.HasValue)
            query = query.Where(r => r.Date >= start.Value);

        if (end.HasValue)
            query = query.Where(r => r.Date <= end.Value);

        if (!string.IsNullOrWhiteSpace(owner))
            query = query.Where(r => r.Owner == owner);

        if (!string.IsNullOrWhiteSpace(source))
            query = query.Where(r => r.Source == source);

        if (!string.IsNullOrWhiteSpace(itemType))
            query = query.Where(r => r.ItemType == itemType);

        var result = await query
            .OrderBy(r => r.Date)
            .ToListAsync();

        return Ok(result);
    }

    /// <summary>
    /// 获取指定月份的收入统计摘要信息。
    /// </summary>
    /// <returns>包含 指定月度总营收，指定日期营收，指定月月均收入 </returns>
    [HttpGet("home/summary/monthly")]
    public async Task<ActionResult<MonthlySummaryDto>> GetMonthlySummary(DateOnly date)
    {
        var targetMonthStart = new DateOnly(date.Year, date.Month, 1);  // 获取目标月的第一天
        var targetMonthEnd = targetMonthStart.AddMonths(1);  // 终点为即下月1号，用于 "<" 判断

        // 获取本月记录
        var recordsInMonth = await _context.RevenueRecords
            .Where(r =>
                r.Date >= targetMonthStart &&
                r.Date < targetMonthEnd &&
                !r.IsExcludedFromSummary &&
                !r.IsVisitCount)
            .ToListAsync();

        // 封装计算逻辑：退费为负数
        decimal AdjustedValue(RevenueRecord r) =>
            r.ItemType == "退费" ? -r.Value : r.Value;

        var totalMonthly = recordsInMonth.Sum(r => AdjustedValue(r));

        var totalToday = recordsInMonth
            .Where(r => r.Date == date)
            .Sum(r => AdjustedValue(r));

        int activeDays = recordsInMonth//当前月有数据的日数
            .Select(r => r.Date)
            .Distinct()
            .Count();

        //日均数据
        decimal averageDaily = activeDays > 0 ? totalMonthly / activeDays : 0;

        //包含当月所有每日数据
        var dailyMap = recordsInMonth
            .GroupBy(r => r.Date)
            .ToDictionary(g => g.Key, g => g.Sum(AdjustedValue));

        var result = new MonthlySummaryDto
        {
            TotalMonthly = totalMonthly,
            AverageDaily = Math.Round(averageDaily, 2),
            DailyMap = dailyMap
        };

        return Ok(result);
    }


    /// <summary>
    /// 获取“当前月份”各医生营收汇总 + 本月营业天数。
    /// 退费按负值扣减；TotalVisits 为 IsVisitCount == true 的 Value 累加。
    /// </summary>
    [HttpGet("doctors/summary/currentMonth")]
    public async Task<ActionResult<DoctorMonthlySummaryDto>> GetDoctorsSummaryCurrentMonth()
    {
        // 计算本月起止
        DateTime today = DateTime.Today;
        DateOnly monthStart = new DateOnly(today.Year, today.Month, 1);
        DateOnly monthEnd = monthStart.AddMonths(1);

        // 基础过滤（排除 IsExcludedFromSummary）
        IQueryable<RevenueRecord> baseQuery = _context.RevenueRecords
            .Where(r => r.Date >= monthStart && r.Date < monthEnd)
            .Where(r => !r.IsExcludedFromSummary);

        // 计算营业天数（只看非 VisitCount 记录）
        int businessDays = await baseQuery
            .Where(r => !r.IsVisitCount)
            .Select(r => r.Date)
            .Distinct()
            .CountAsync();

        // 先获取列表，不在数据库层排序
        List<DoctorMonthlySummaryDto.DoctorRow> rows = await baseQuery
            .GroupBy(r => r.Owner)
            .Select(g => new DoctorMonthlySummaryDto.DoctorRow
            {
                Owner = g.Key,
                TotalRevenue = g.Where(r => !r.IsVisitCount)
                                .Sum(r => r.ItemType == "退费" ? -r.Value : r.Value),
                TotalVisits = (int)g.Where(r => r.IsVisitCount)
                                    .Sum(r => r.Value)
            })
            .ToListAsync();

        // 在内存中按收入降序排序
        rows = rows.OrderByDescending(r => r.TotalRevenue).ToList();

        // 汇总（调试用）
        decimal totalRevenue = rows.Sum(r => r.TotalRevenue);
        int totalVisits = rows.Sum(r => r.TotalVisits);

        DoctorMonthlySummaryDto dto = new DoctorMonthlySummaryDto
        {
            BusinessDays = businessDays,
            TotalMonthlyRevenue = totalRevenue,
            TotalMonthlyVisits = totalVisits,
            Doctors = rows
        };

        return Ok(dto);
    }


    /// <summary>
    /// 获取指定月份医生营收汇总。
    /// year / month 必填（1-12）。其它逻辑同 currentMonth。
    /// </summary>
    [HttpGet("doctors/summary")]
    public async Task<ActionResult<DoctorMonthlySummaryDto>> GetDoctorsSummaryByMonth(
        [FromQuery] int year,
        [FromQuery] int month)
    {
        if (month < 1 || month > 12) return BadRequest("month 必须为 1-12");

        DateOnly monthStart = new DateOnly(year, month-1, 1);
        DateOnly monthEnd = monthStart.AddMonths(1);

        IQueryable<RevenueRecord> baseQuery = _context.RevenueRecords
            .Where(r => r.Date >= monthStart && r.Date < monthEnd)
            .Where(r => !r.IsExcludedFromSummary);

        int businessDays = await baseQuery
            .Where(r => !r.IsVisitCount)
            .Select(r => r.Date)
            .Distinct()
            .CountAsync();

        List<DoctorMonthlySummaryDto.DoctorRow> rows = await baseQuery
            .GroupBy(r => r.Owner)
            .Select(g => new DoctorMonthlySummaryDto.DoctorRow
            {
                Owner = g.Key,
                TotalRevenue = g.Where(r => !r.IsVisitCount)
                                .Sum(r => r.ItemType == "退费" ? -r.Value : r.Value),
                TotalVisits = (int)g.Where(r => r.IsVisitCount)
                                    .Sum(r => r.Value)
            })
            .ToListAsync();

        rows = rows.OrderByDescending(r => r.TotalRevenue).ToList();

        DoctorMonthlySummaryDto dto = new DoctorMonthlySummaryDto
        {
            BusinessDays = businessDays,
            TotalMonthlyRevenue = rows.Sum(r => r.TotalRevenue),
            TotalMonthlyVisits = rows.Sum(r => r.TotalVisits),
            Doctors = rows
        };

        return Ok(dto);
    }

}


# --- Data\AppDbContext.cs ---
﻿using Microsoft.EntityFrameworkCore;
using FMS.Server.Models;

namespace FMS.Server.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<RevenueRecord> RevenueRecords { get; set; }
    }
}


# --- Migrations\20250521112114_InitialCreate.cs ---
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "RevenueRecords",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
                    Date = table.Column<DateTime>(type: "TEXT", nullable: false),
                    Doctor = table.Column<string>(type: "TEXT", nullable: false),
                    Department = table.Column<string>(type: "TEXT", nullable: false),
                    ItemType = table.Column<string>(type: "TEXT", nullable: false),
                    Amount = table.Column<decimal>(type: "TEXT", nullable: false),
                    Source = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RevenueRecords", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "RevenueRecords");
        }
    }
}


# --- Migrations\20250521112114_InitialCreate.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521112114_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\20250523100605_AddIsVisitCountField.cs ---
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class AddIsVisitCountField : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "TEXT");

            migrationBuilder.AlterColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "TEXT");

            migrationBuilder.AddColumn<bool>(
                name: "IsVisitCount",
                table: "RevenueRecords",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsVisitCount",
                table: "RevenueRecords");

            migrationBuilder.AlterColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "TEXT",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "TEXT",
                oldNullable: true);
        }
    }
}


# --- Migrations\20250523100605_AddIsVisitCountField.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250523100605_AddIsVisitCountField")]
    partial class AddIsVisitCountField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("Doctor")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\20250524133635_RebuildRevenueStructure.cs ---
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class RebuildRevenueStructure : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Department",
                table: "RevenueRecords");

            migrationBuilder.DropColumn(
                name: "Doctor",
                table: "RevenueRecords");

            migrationBuilder.RenameColumn(
                name: "Amount",
                table: "RevenueRecords",
                newName: "Value");

            migrationBuilder.AddColumn<bool>(
                name: "IsExcludedFromSummary",
                table: "RevenueRecords",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<string>(
                name: "Owner",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsExcludedFromSummary",
                table: "RevenueRecords");

            migrationBuilder.DropColumn(
                name: "Owner",
                table: "RevenueRecords");

            migrationBuilder.RenameColumn(
                name: "Value",
                table: "RevenueRecords",
                newName: "Amount");

            migrationBuilder.AddColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true);
        }
    }
}


# --- Migrations\20250524133635_RebuildRevenueStructure.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524133635_RebuildRevenueStructure")]
    partial class RebuildRevenueStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExcludedFromSummary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\AppDbContextModelSnapshot.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExcludedFromSummary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Models\RevenueRecord.cs ---
using System.ComponentModel.DataAnnotations;

namespace FMS.Server.Models;

public class RevenueRecord
{
    [Key]
    public Guid Id { get; set; }  // 

    public DateOnly Date { get; set; }  // 

    public string Owner { get; set; } = null!;  // ҽ

    public string ItemType { get; set; } = null!;  // ֽҽ˴ε

    public decimal Value { get; set; }  // ˴

    public bool IsVisitCount { get; set; }  // ǷΪ˴

    public bool IsExcludedFromSummary { get; set; }  // Ƿӻų

    public string Source { get; set; }  // Դ磺ServerClientȣ
}


# --- Models\Dtos\DoctorMonthlySummaryDto.cs ---
﻿namespace FMS.Server.Models.Dtos
{
    namespace FMS.Server.Models.Dtos
    {
        /// <summary>
        /// 当前月份医生汇总 DTO
        /// </summary>
        public class DoctorMonthlySummaryDto
        {
            public int BusinessDays { get; set; }          // 本月营业天数
            public decimal TotalMonthlyRevenue { get; set; } // 本月总营收（调试用）
            public int TotalMonthlyVisits { get; set; }     // 本月总人次（调试用）

            public List<DoctorRow> Doctors { get; set; } = new();

            public class DoctorRow
            {
                public string Owner { get; set; } = string.Empty;
                public decimal TotalRevenue { get; set; }   // 医生总营收
                public int TotalVisits { get; set; }        // 医生总人次
            }
        }
    }

}


# --- Models\Dtos\MonthlySummaryDto.cs ---
﻿namespace FMS.Server.Models.Dtos
{
    public class MonthlySummaryDto
    {
        public decimal TotalMonthly { get; set; }
        public decimal AverageDaily { get; set; }
        public Dictionary<DateOnly, decimal> DailyMap { get; set; } = new();
    }
}
