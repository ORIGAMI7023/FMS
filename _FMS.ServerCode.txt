

# --- appsettings.Development.json ---
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}


# --- appsettings.json ---
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}


# --- FMS.Server.csproj ---
﻿<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ClosedXML" Version="0.105.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="9.0.5" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="9.0.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="9.0.5" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.6.2" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Converter\" />
  </ItemGroup>

</Project>


# --- FMS.Server.http ---
@FMS.Server_HostAddress = http://localhost:7050

### [HttpPost("import")]
### ڵ
POST {{FMS.Server_HostAddress}}/api/revenue/import
Content-Type: application/json

[
  {
    "owner": "к",
    "itemType": "ҽ",
    "value": 123.45,
    "date": "2024-05-01",
    "isVisitCount": false,
    "isExcludedFromSummary": false,
    "source": "Admin"
  },
  {
    "owner": "ҩ",
    "itemType": "˴",
    "value": 456.78,
    "date": "2024-05-02",
    "isVisitCount": true,
    "isExcludedFromSummary": false,
    "source": "Admin"
  }
]


### [HttpGet("query")]
### ѯ202411 ~ 131
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31
Accept: application/json
### ѯҽΪк죬ʱ䷶ΧΪ 20241
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31&owner=к
Accept: application/json
### ѯ Admin ¼ݣʱ䣩
GET http://localhost:7050/api/revenue/query?source=Admin
Accept: application/json
### ѯ20241µġ˴Ρ
GET http://localhost:7050/api/revenue/query?start=2024-01-01&end=2024-01-31&itemType=˴
Accept: application/json
### ѯȫݣգ
GET http://localhost:7050/api/revenue/query?
Accept: application/json


### [HttpGet("statistics/monthly/amount")]
### ͳƽ20245£
GET {{FMS.Server_HostAddress}}/api/revenue/statistics/monthly/amount?year=2024&month=5
Accept: application/json


### [HttpGet("statistics/monthly/visitcount")]
### ͳ˴Σ20245£
GET {{FMS.Server_HostAddress}}/api/revenue/statistics/monthly/visitcount?year=2024&month=5
Accept: application/json


# --- Program.cs ---
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;

namespace FMS.Server
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // ע
            builder.Services.AddControllers();
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();
            builder.Services.AddDbContext<AppDbContext>(options =>
                options.UseSqlite("Data Source=fms.db"));

            // ʽ󶨼˿
            builder.WebHost.ConfigureKestrel(options =>
            {
                options.ListenAnyIP(7050); // HTTP
                options.ListenAnyIP(7051, listenOptions =>
                {
                    listenOptions.UseHttps(); // ÿ֤ HTTPS
                });
            });


            var app = builder.Build();

            //  Swagger
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            // м
            //app.UseHttpsRedirection();
            app.UseAuthorization();
            app.MapControllers();

            // 
            app.Run();
        }
    }
}



# --- Controllers\AppDbContextFactory.cs ---
﻿using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;

namespace FMS.Server.Data
{
    public class AppDbContextFactory : IDesignTimeDbContextFactory<AppDbContext>
    {
        public AppDbContext CreateDbContext(string[] args)
        {
            var optionsBuilder = new DbContextOptionsBuilder<AppDbContext>();
            optionsBuilder.UseSqlite("Data Source=fms.db");

            return new AppDbContext(optionsBuilder.Options);
        }
    }

}


# --- Controllers\RevenueController.cs ---
using ClosedXML.Excel;
using DocumentFormat.OpenXml.Wordprocessing;
using FMS.Server.Data;
using FMS.Server.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Globalization;

namespace FMS.Server.Controllers;

[ApiController]
[Route("api/revenue")]
public class RevenueController : ControllerBase
{
    private readonly AppDbContext _context;

    public RevenueController(AppDbContext context) { _context = context; }

    /// <summary>
    /// import接口，用于从JSON格式批量导入收入记录数据。
    /// </summary>
    [HttpPost("import")]
    public async Task<IActionResult> ImportFromJson([FromBody] List<RevenueRecord> records)
    {
        //Console.WriteLine("---- 收到 POST /import 请求，共有记录数：" + records?.Count);

        if (records == null || records.Count == 0)
            return BadRequest(new { message = "上传数据为空" });

        foreach (var record in records)
        {   
            record.Id = Guid.NewGuid(); // 生成guid主键
            if (string.IsNullOrWhiteSpace(record.Source))
                record.Source = "Admin";  // 如果Soruce字段为空，默认标注来源为Admin
        }

        try
        {
            await _context.RevenueRecords.AddRangeAsync(records);
            await _context.SaveChangesAsync();

            return Ok(new { message = "导入成功", count = records.Count });  // 返回导入成功的记录数
        }
        catch (DbUpdateException ex)
        {
            // 数据库更新失败（比如外键、唯一键等问题）
            return StatusCode(500, new { message = "数据库更新失败", error = ex.Message });
        }
        catch (Exception ex)
        {
            // 其他未处理异常
            return StatusCode(500, new { message = "导入失败", error = ex.Message });
        }
    }

    /// <summary>
    /// query接口，用于查询收入记录数据。
    /// </summary>
    [HttpGet("query")]
    public async Task<IActionResult> Query(
    [FromQuery] DateOnly? start = null,
    [FromQuery] DateOnly? end = null,
    [FromQuery] string? owner = null,
    [FromQuery] string? source = null,
    [FromQuery] string? itemType = null)
    {
        var query = _context.RevenueRecords.AsQueryable();

        if (start.HasValue)
            query = query.Where(r => r.Date >= start.Value);

        if (end.HasValue)
            query = query.Where(r => r.Date <= end.Value);

        if (!string.IsNullOrWhiteSpace(owner))
            query = query.Where(r => r.Owner == owner);

        if (!string.IsNullOrWhiteSpace(source))
            query = query.Where(r => r.Source == source);

        if (!string.IsNullOrWhiteSpace(itemType))
            query = query.Where(r => r.ItemType == itemType);

        var result = await query
            .OrderBy(r => r.Date)
            .ToListAsync();

        return Ok(result);
    }

    /// <summary>
    /// statistics/monthly/amount 接口，用于获取指定年月的收入统计数据。
    /// </summary>
    [HttpGet("statistics/monthly/amount")]
    public async Task<IActionResult> GetMonthlyAmountStatistics([FromQuery] int year, [FromQuery] int month)
    {
        if (year < 2000 || month < 1 || month > 12)
            return BadRequest(new { message = "参数无效" });

        var startDate = new DateOnly(year, month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);

        var statistics = await _context.RevenueRecords
            .Where(r => r.Date >= startDate && r.Date <= endDate
                        && !r.IsExcludedFromSummary
                        && !r.IsVisitCount)
            .GroupBy(r => new { r.Owner, r.ItemType })
            .Select(g => new
            {
                Owner = g.Key.Owner,
                ItemType = g.Key.ItemType,
                TotalAmount = g.Sum(r => r.Value)
            })
            .ToListAsync();

        return Ok(statistics);
    }

    /// <summary>
    /// statistics/monthly/visitcount 接口，用于获取指定年月的访问人次统计数据。
    /// </summary>
    [HttpGet("statistics/monthly/visitcount")]
    public async Task<IActionResult> GetMonthlyVisitCountStatistics([FromQuery] int year, [FromQuery] int month)
    {
        if (year < 2000 || month < 1 || month > 12)
            return BadRequest(new { message = "参数无效" });

        var startDate = new DateOnly(year, month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);

        var statistics = await _context.RevenueRecords
            .Where(r => r.Date >= startDate && r.Date <= endDate
                        && !r.IsExcludedFromSummary
                        && r.IsVisitCount)
            .GroupBy(r => new { r.Owner, r.ItemType })
            .Select(g => new
            {
                Owner = g.Key.Owner,
                ItemType = g.Key.ItemType,
                TotalCount = g.Sum(r => r.Value) // 统一使用Value字段存储人次数
            })
            .ToListAsync();

        return Ok(statistics);
    }



}


# --- Data\AppDbContext.cs ---
﻿using Microsoft.EntityFrameworkCore;
using FMS.Server.Models;

namespace FMS.Server.Data
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

        public DbSet<RevenueRecord> RevenueRecords { get; set; }
    }
}


# --- Migrations\20250521112114_InitialCreate.cs ---
﻿using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "RevenueRecords",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "TEXT", nullable: false),
                    Date = table.Column<DateTime>(type: "TEXT", nullable: false),
                    Doctor = table.Column<string>(type: "TEXT", nullable: false),
                    Department = table.Column<string>(type: "TEXT", nullable: false),
                    ItemType = table.Column<string>(type: "TEXT", nullable: false),
                    Amount = table.Column<decimal>(type: "TEXT", nullable: false),
                    Source = table.Column<string>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RevenueRecords", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "RevenueRecords");
        }
    }
}


# --- Migrations\20250521112114_InitialCreate.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250521112114_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Doctor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\20250523100605_AddIsVisitCountField.cs ---
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class AddIsVisitCountField : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "TEXT");

            migrationBuilder.AlterColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true,
                oldClrType: typeof(string),
                oldType: "TEXT");

            migrationBuilder.AddColumn<bool>(
                name: "IsVisitCount",
                table: "RevenueRecords",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsVisitCount",
                table: "RevenueRecords");

            migrationBuilder.AlterColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "TEXT",
                oldNullable: true);

            migrationBuilder.AlterColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "",
                oldClrType: typeof(string),
                oldType: "TEXT",
                oldNullable: true);
        }
    }
}


# --- Migrations\20250523100605_AddIsVisitCountField.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250523100605_AddIsVisitCountField")]
    partial class AddIsVisitCountField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasColumnType("TEXT");

                    b.Property<string>("Doctor")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\20250524133635_RebuildRevenueStructure.cs ---
﻿using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace FMS.Server.Migrations
{
    /// <inheritdoc />
    public partial class RebuildRevenueStructure : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Department",
                table: "RevenueRecords");

            migrationBuilder.DropColumn(
                name: "Doctor",
                table: "RevenueRecords");

            migrationBuilder.RenameColumn(
                name: "Amount",
                table: "RevenueRecords",
                newName: "Value");

            migrationBuilder.AddColumn<bool>(
                name: "IsExcludedFromSummary",
                table: "RevenueRecords",
                type: "INTEGER",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<string>(
                name: "Owner",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "IsExcludedFromSummary",
                table: "RevenueRecords");

            migrationBuilder.DropColumn(
                name: "Owner",
                table: "RevenueRecords");

            migrationBuilder.RenameColumn(
                name: "Value",
                table: "RevenueRecords",
                newName: "Amount");

            migrationBuilder.AddColumn<string>(
                name: "Department",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "Doctor",
                table: "RevenueRecords",
                type: "TEXT",
                nullable: true);
        }
    }
}


# --- Migrations\20250524133635_RebuildRevenueStructure.Designer.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524133635_RebuildRevenueStructure")]
    partial class RebuildRevenueStructure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExcludedFromSummary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Migrations\AppDbContextModelSnapshot.cs ---
﻿// <auto-generated />
using System;
using FMS.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FMS.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("FMS.Server.Models.RevenueRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsExcludedFromSummary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisitCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RevenueRecords");
                });
#pragma warning restore 612, 618
        }
    }
}


# --- Models\RevenueRecord.cs ---
using System.ComponentModel.DataAnnotations;

namespace FMS.Server.Models;

public class RevenueRecord
{
    [Key]
    public Guid Id { get; set; }  // 

    public DateOnly Date { get; set; }  // 

    public string Owner { get; set; } = null!;  // ҽ

    public string ItemType { get; set; } = null!;  // ֽҽ˴ε

    public decimal Value { get; set; }  // ˴

    public bool IsVisitCount { get; set; }  // ǷΪ˴

    public bool IsExcludedFromSummary { get; set; }  // Ƿӻų

    public string Source { get; set; }  // Դ磺ServerClientȣ
}
